
=== setup linux mint ===
1.) Download linux mint 19 - 64 Bit (cannot use 32 Bit because of android build requirements )
2.) Create New Image In Virtual Box using the linux mint iso and OS Linux/Ubuntu 64Bit
4.) The virtual drive should be at least 80GB and dynamic
3.) Choose NOT to have to enter password on boot
4.) Install with name gotv and password gotvpass and automatic login
5.) Change the optical drive iso to Devices->Insert Guest Additions CD Image and reboot
6.) Open termninal and sudo passwd ( first time use only.. this will set the root password )
7.) type gotvpass 3 times.. once for sudo and the next 2 times for root password
8.) Open VBox_GAs_5.2.22 and doubleclick autorun.sh and choose run in terminal
9.) Enter the root password and let it install
10.) From Mint menu shutdown linux
11.) Virtual Box->Settings->Advanced Tab enable Shared Clipboard and Drag'n'Drop
12.) Setting->Display make
 Video Memory 128MB and scaling as desired
13.) Power up mint image and Optionally in First steps create system snapshot
14.) First Step->Update Manager install updates till no more available

==== some usefull tools for developers ======
1.) Meld - File Difference comparison tool
sudo apt-get install meld



=== setup to build ffmpeg for linux mint ===
instructions for building ffmpeg for linux mint are at:
https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu

1.) Create directories
/home/gotv/ffmpeg_sources – Where the source files will be downloaded. This can be deleted if desired when finished with the guide.
/home/gotv/ffmpeg_build – Where the files will be built and libraries installed. This can be deleted if desired when finished with the guide.
/home/gotv/bin – Where the resulting binaries (ffmpeg, ffplay, ffprobe, x264, x265) will be installed. 

2.) Install tool for compiling ffmpeg
These are packages required for compiling, but you can remove them when you are done if you prefer:
sudo apt-get update -qq && sudo apt-get -y install autoconf automake build-essential cmake git-core libass-dev libfreetype6-dev libsdl2-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo wget zlib1g-dev

3.) NASM - An assembler used by some libraries.
cd ~/ffmpeg_sources && wget https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.bz2 && tar xjvf nasm-2.13.03.tar.bz2 && cd nasm-2.13.03 && ./autogen.sh && PATH="$HOME/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" && make && make install

3.) Yasm - An assembler used by some libraries.
If your repository provides yasm version ≥ 1.2.0 then you can install that instead of compiling:
sudo apt-get install yasm

Otherwise you can compile:

cd ~/ffmpeg_sources && wget -O yasm-1.3.0.tar.gz https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz && tar xzvf yasm-1.3.0.tar.gz && cd yasm-1.3.0 && ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" && make && make install

4.) libx264 -H.264 video encoder. See the H.264 Encoding Guide for more information and usage examples.
Requires ffmpeg to be configured with --enable-gpl --enable-libx264.

If your repository provides libx264-dev version ≥ 118 then you can install that instead of compiling:
sudo apt-get install libx264-dev

Otherwise you can compile:

cd ~/ffmpeg_sources && git -C x264 pull 2> /dev/null || git clone --depth 1 https://git.videolan.org/git/x264 && cd x264 && PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static --enable-pic && PATH="$HOME/bin:$PATH" make && make install

5.) libx265 -H.265/HEVC video encoder. See the H.265 Encoding Guide for more information and usage examples.
If your repository provides libx265-dev version ≥ 68 then you can install that instead of compiling:
sudo apt-get install libx265-dev libnuma-dev

Otherwise you can compile:

sudo apt-get install mercurial libnuma-dev && cd ~/ffmpeg_sources && if cd x265 2> /dev/null; then hg pull && hg update; else hg clone https://bitbucket.org/multicoreware/x265; fi && cd x265/build/linux && PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_SHARED=off ../../source && PATH="$HOME/bin:$PATH" make && make install

6.) libvpx - VP8/VP9 video encoder/decoder. See the VP9 Video Encoding Guide for more information and usage examples.
Requires ffmpeg to be configured with --enable-libvpx.
If your repository provides libvpx-dev version ≥ 1.4.0 then you can install that instead of compiling:
sudo apt-get install libvpx-dev

Otherwise you can compile:

cd ~/ffmpeg_sources && git -C libvpx pull 2> /dev/null || git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && cd libvpx && PATH="$HOME/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm && PATH="$HOME/bin:$PATH" make && make install

7.) libfdk-aac - AAC audio encoder. See the AAC Audio Encoding Guide for more information and usage examples.
Requires ffmpeg to be configured with --enable-libfdk-aac (and --enable-nonfree if you also included --enable-gpl).
If your repository provides libfdk-aac-dev then you can install that instead of compiling:
sudo apt-get install libfdk-aac-dev

Otherwise you can compile:

cd ~/ffmpeg_sources && git -C fdk-aac pull 2> /dev/null || git clone --depth 1 https://github.com/mstorsjo/fdk-aac && cd fdk-aac && autoreconf -fiv && ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && make && make install

8.) libmp3lame - MP3 audio encoder.
Requires ffmpeg to be configured with --enable-libmp3lame.
If your repository provides libmp3lame-dev version ≥ 3.98.3 then you can install that instead of compiling:
sudo apt-get install libmp3lame-dev

Otherwise you can compile:

cd ~/ffmpeg_sources && wget -O lame-3.100.tar.gz https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz && tar xzvf lame-3.100.tar.gz && cd lame-3.100 &&  PATH="$HOME/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --disable-shared --enable-nasm && PATH="$HOME/bin:$PATH" make && make install

9.) libopus - Opus audio decoder and encoder.
Requires ffmpeg to be configured with --enable-libopus.
If your repository provides libopus-dev version ≥ 1.1 then you can install that instead of compiling:
sudo apt-get install libopus-dev

Otherwise you can compile:

cd ~/ffmpeg_sources && git -C opus pull 2> /dev/null || git clone --depth 1 https://github.com/xiph/opus.git && cd opus && ./autogen.sh && ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && make && make install

10.) libaom - AV1 video encoder/decoder:
cd ~/ffmpeg_sources && git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && mkdir aom_build && cd aom_build && PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_SHARED=off -DENABLE_NASM=on ../aom && PATH="$HOME/bin:$PATH" make && make install

11a.) FFmpeg - with libfdk-aac
cd ~/ffmpeg_sources && wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && tar xjvf ffmpeg-snapshot.tar.bz2 && cd ffmpeg &&  PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure  --prefix="$HOME/ffmpeg_build"   --pkg-config-flags="--static" --extra-cflags="-I$HOME/ffmpeg_build/include" --extra-ldflags="-L$HOME/ffmpeg_build/lib" --extra-libs="-lpthread -lm" --bindir="$HOME/bin" --enable-gpl --enable-libaom --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-nonfree && PATH="$HOME/bin:$PATH" make && make install && hash -r

11b.) FFmpeg - without libfdk-aac ( uses built in ffmpeg aac decoder )
cd ~/ffmpeg_sources && wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && tar xjvf ffmpeg-snapshot.tar.bz2 && cd ffmpeg &&  PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure  --prefix="$HOME/ffmpeg_build"   --pkg-config-flags="--static" --extra-cflags="-I$HOME/ffmpeg_build/include" --extra-ldflags="-L$HOME/ffmpeg_build/lib" --extra-libs="-lpthread -lm" --bindir="$HOME/bin" --enable-gpl --enable-libaom --enable-libass --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-nonfree && PATH="$HOME/bin:$PATH" make && make install && hash -r

12.) after build you should be in directory ~/ffmpeg_sources
run command source ~/.profile so that ffmpeg can be located from terminal

13.) A good place to get basic ffmpeg commands is
https://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/

14.) Test that ffmpeg works by extracting audio from a video file
cd ~/TestMedia/video && ffmpeg -i MJPEGWithAAC.avi -vn -ar 44100 -ac 2 -ab 192000 -f mp3 extractAudioTest.mp3

15.) now would be a good time to make a Virtual Image Clone or Time Snapshot

======= setup Qt 5 ======
1.) Install Qt Creator using the following command in a terminal window
sudo apt-get install qtcreator

2.) Install Qt 5 Libraries, Header Files and Tools
sudo apt-get install qtdeclarative5-dev

3.) Install a C++ Compiler
sudo apt-get install g++




======= setup to build vlc for android ======
VLC cannot be build on windows without extreme setup so only build on linux
instructions for building vlc for android
https://wiki.videolan.org/AndroidCompile
get android ndk r18b from
https://developer.android.com/ndk/downloads/
get android studio from
https://developer.android.com/studio/

1.) install required tools
sudo apt-get install automake ant autopoint cmake build-essential libtool patch pkg-config protobuf-compiler ragel subversion unzip git openjdk-8-jre openjdk-8-jdk flex python wget
2.) If you are running a 64-bit version of Ubuntu, you need to install some 32-bit libraries with the following command:
sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386


3.) create directory /home/gotv/gotvarchives/ ( to save off downloaded archives and programs for developement )
					/home/gotv/gotvtools/
					/home/gotv/Android/ 					
				    /home/gotv/Android/Ndk/android-ndk-r18b ( where to put the unziped ndk )
					/home/gotv/gotvproject/
					/home/gotv/vlcproject/
					/home/gotv/vlcproject/vlc-source
					

4.) Optional Locations: Unpack the .zip file you downloaded to an appropriate location for your applications, such as within /usr/local/ for your user profile, or /opt/ for shared users.
4a.) Rename if required and unzip android studio to /home/gotv/Android/android-studio
4b.) Rename if required and unzip android ndk to /home/gotv/Android/Ndk/android-ndk-r18b

5.) This is a good time to make either a Virtual Image clone or a Time Snapshot in Linux Mint

    To launch Android Studio, open a terminal, navigate to the android-studio/bin/ directory, and execute studio.sh.
    Select whether you want to import previous Android Studio settings or not, then click OK.
    The Android Studio Setup Wizard guides you through the rest of the setup, which includes downloading Android SDK components that are required for development.
6.) Tip: To make Android Studio available in your list of applications, select Tools > Create Desktop Entry from the Android Studio menu bar.


8.) Setup android env variables

export ANDROID_SDK=/home/gotv/Android/Sdk
export ANDROID_NDK=/home/gotv/Android/Ndk/android-ndk-r18b
export PATH=$PATH:$ANDROID_SDK/platform-tools:$ANDROID_SDK/tools


