#pragma once
//============================================================================
// Copyright (C) 2014 Brett R. Jones 
// Issued to MIT style license by Brett R. Jones in 2017
//
// You may use, copy, modify, merge, publish, distribute, sub-license, and/or sell this software 
// provided this Copyright is not modified or removed and is included all copies or substantial portions of the Software
//
// This code is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// bjones.engineer@gmail.com
// http://www.nolimitconnect.com
//============================================================================

#include "NetworkTestBase.h"

#include "PingResponseServer.h"

#include <GoTvInterface/IToGui.h>

#include <CoreLib/VxThread.h>
#include <CoreLib/VxMutex.h>


class IsPortOpenTest : public NetworkTestBase
{
public:
	IsPortOpenTest( P2PEngine& engine, EngineSettings& engineSettings, NetServicesMgr& netServicesMgr, NetServiceUtils& netServiceUtils );
	virtual ~IsPortOpenTest() = default;


	virtual void				fromGuiRunIsPortOpenTest( uint16_t port );
	void						isPortOpenShutdown( void );
    /// override from base
    virtual void				threadRunNetworkTest( void ) override;
	void						handleTcpData( VxSktBase * sktBase );

private:
	void						startPingResponse( void );
	void						stopPingResponse( void );
	const char *				getTestName( bool isHost );
	void						sendTestStatus( EIsPortOpenStatus eStatus, const char * msg, ... );
	void						sendTestLog( const char * msg, ... );

	EIsPortOpenStatus			doConnectionTest( std::string& nodeUrl, bool isHost );
	EIsPortOpenStatus			doConnectTestFailed( bool isHost );
	EIsPortOpenStatus			doConnectTestSuccess( bool isHost );
	void						doTestShutdown( void );

	//=== vars ===//
	PingResponseServer			m_PingResponseServer;
	uint16_t				    m_Port;	
    bool                        m_RunningtListenForPortTest{ false };

private:
	IsPortOpenTest() = delete; // don't allow default constructor
	IsPortOpenTest(const IsPortOpenTest&) = delete; // don't allow copy constructor
};

