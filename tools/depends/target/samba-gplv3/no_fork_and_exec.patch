--- lib/util/become_daemon.c
+++ lib/util/become_daemon.c
@@ -80,7 +80,7 @@
 {
 	pid_t newpid;
 	if (do_fork) {
-		newpid = fork();
+		newpid = -1;
 		if (newpid) {
 #if HAVE_SYSTEMD
 			sd_notifyf(0, "READY=0\nSTATUS=Starting process...\nMAINPID=%lu", (unsigned long) newpid);
--- lib/util/fault.c
+++ lib/util/fault.c
@@ -131,7 +131,7 @@
 			snprintf(pidstr, sizeof(pidstr), "%d", (int) getpid());
 			all_string_sub(cmdstring, "%d", pidstr, sizeof(cmdstring));
 			DEBUG(0, ("smb_panic(): calling panic action [%s]\n", cmdstring));
-			result = system(cmdstring);
+			result = -1;
 
 			if (result == -1)
 				DEBUG(0, ("smb_panic(): fork failed in panic action: %s\n",
--- source3/lib/server_prefork.c
+++ source3/lib/server_prefork.c
@@ -106,7 +106,7 @@
 		pfp->pool[i].allowed_clients = 1;
 		pfp->pool[i].started = now;
 
-		pid = fork();
+		pid = -1;
 		switch (pid) {
 		case -1:
 			DEBUG(1, ("Failed to prefork child n. %d !\n", i));
@@ -194,7 +194,7 @@
 		pfp->pool[i].allowed_clients = 1;
 		pfp->pool[i].started = now;
 
-		pid = fork();
+		pid = -1;
 		switch (pid) {
 		case -1:
 			DEBUG(1, ("Failed to prefork child n. %d !\n", j));
--- source3/lib/system.orig	2015-12-12 17:58:30.000000000 +0100
+++ source3/lib/system.c	2015-12-12 17:58:45.000000000 +0100
@@ -1198,7 +1198,7 @@
 		goto err_exit;
 	}
 
-	entry->child_pid = fork();
+	entry->child_pid = -1;
 
 	if (entry->child_pid == -1) {
 		DEBUG(0, ("sys_popen: fork failed: %s\n", strerror(errno)));
@@ -1229,7 +1229,7 @@
 		for (p = popen_chain; p; p = p->next)
 			close(p->fd);
 
-		ret = execv(argl[0], argl);
+		ret = -1;
 		if (ret == -1) {
 			DEBUG(0, ("sys_popen: ERROR executing command "
 				  "'%s': %s\n", command, strerror(errno)));
--- source3/lib/util.c.orig	2015-12-12 18:01:38.000000000 +0100
+++ source3/lib/util.c	2015-12-12 18:01:58.000000000 +0100
@@ -795,7 +795,7 @@
 	cmd = lp_panic_action(talloc_tos());
 	if (cmd && *cmd) {
 		DEBUG(0, ("smb_panic(): calling panic action [%s]\n", cmd));
-		result = system(cmd);
+		result = -1;
 
 		if (result == -1)
 			DEBUG(0, ("smb_panic(): fork failed in panic action: %s\n",
--- source3/lib/sock_exec.c.orig	2015-12-12 18:06:28.000000000 +0100
+++ source3/lib/sock_exec.c	2015-12-12 18:06:41.000000000 +0100
@@ -101,7 +101,7 @@
 		DEBUG(0,("socketpair_tcp failed (%s)\n", strerror(errno)));
 		return -1;
 	}
-	if (fork() == 0) {
+	if (-1 == 0) {
 		close(fd[0]);
 		close(0);
 		close(1);
@@ -111,7 +111,7 @@
 		if (dup(fd[1]) == -1) {
 			exit(1);
 		}
-		exit(system(prog));
+		exit(-1);
 	}
 	close(fd[1]);
 	return fd[0];
--- source3/lib/smbrun.c.orig	2015-12-12 18:00:04.000000000 +0100
+++ source3/lib/smbrun.c	2015-12-12 18:00:57.000000000 +0100
@@ -97,7 +97,7 @@
 
 	saved_handler = CatchChildLeaveStatus();
                                    	
-	if ((pid=fork()) < 0) {
+	if ((pid=-1) < 0) {
 		DEBUG(0,("smbrun: fork failed with error %s\n", strerror(errno) ));
 		(void)CatchSignal(SIGCLD, saved_handler);
 		if (outfd) {
@@ -197,8 +197,8 @@
 				exit(82);
 		}
 
-		execl("/bin/sh","sh","-c",
-		    newcmd ? (const char *)newcmd : cmd, NULL);
+		//execl("/bin/sh","sh","-c",
+		//    newcmd ? (const char *)newcmd : cmd, NULL);
 
 		SAFE_FREE(newcmd);
 	}
@@ -261,7 +261,7 @@
 
 	saved_handler = CatchChildLeaveStatus();
                                    	
-	if ((pid=fork()) < 0) {
+	if ((pid=-1) < 0) {
 		DEBUG(0, ("smbrunsecret: fork failed with error %s\n", strerror(errno)));
 		(void)CatchSignal(SIGCLD, saved_handler);
 		return errno;
@@ -349,7 +349,7 @@
 	}
 #endif
 
-	execl("/bin/sh", "sh", "-c", cmd, NULL);  
+	//execl("/bin/sh", "sh", "-c", cmd, NULL);  
 
 	/* not reached */
 	exit(82);
